package com.herry.rssreader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.herry.rssreader.models.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(2, String.class, "link", false, "LINK");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Read = new Property(4, Boolean.class, "read", false, "READ");
        public final static Property Trash = new Property(5, Boolean.class, "trash", false, "TRASH");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property ChannelId = new Property(7, Long.class, "channelId", false, "CHANNEL_ID");
        public final static Property Published = new Property(8, Long.class, "published", false, "PUBLISHED");
    }


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"LINK\" TEXT," + // 2: link
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"READ\" INTEGER," + // 4: read
                "\"TRASH\" INTEGER," + // 5: trash
                "\"CONTENT\" TEXT," + // 6: content
                "\"CHANNEL_ID\" INTEGER," + // 7: channelId
                "\"PUBLISHED\" INTEGER);"); // 8: published
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(5, read ? 1L: 0L);
        }
 
        Boolean trash = entity.getTrash();
        if (trash != null) {
            stmt.bindLong(6, trash ? 1L: 0L);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        Long channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindLong(8, channelId);
        }
 
        Long published = entity.getPublished();
        if (published != null) {
            stmt.bindLong(9, published);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(5, read ? 1L: 0L);
        }
 
        Boolean trash = entity.getTrash();
        if (trash != null) {
            stmt.bindLong(6, trash ? 1L: 0L);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        Long channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindLong(8, channelId);
        }
 
        Long published = entity.getPublished();
        if (published != null) {
            stmt.bindLong(9, published);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // link
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // read
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // trash
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // channelId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // published
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRead(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setTrash(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChannelId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setPublished(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Article entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
